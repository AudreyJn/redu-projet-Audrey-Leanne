#!/usr/bin/env python
# coding: utf-8

import pandas as pd
import matplotlib.pyplot as plt
import os

# Define colors for treatment groups
COLORS = {
    'ABX': '#FF6B6B',      # Red for ABX (antibiotics) group
    'placebo': '#4ECDC4'   # Cyan for placebo group
} 

def load_csv(filename):
    """
    Load CSV data from input directory
    Args:
        filename (str): Name of the CSV file to load
    Returns:
        pandas.DataFrame: Loaded data
    """
    file_path = os.path.join('input', filename)
    return pd.read_csv(file_path, sep=';')


def filter_fecal_data(data):
    """
    Filter data for fecal samples to create line plot
    Args:
        data (pandas.DataFrame): Raw data containing all measurements
    Returns:
        pandas.DataFrame: Filtered data containing only fecal measurements
    """
    # Select only fecal samples
    fecal_data = data[data['sample_type'] == 'fecal']
    
    # Keep only necessary columns
    filtered_data = fecal_data[['mouse_ID', 'treatment', 'experimental_day', 'counts_live_bacteria_per_wet_g']]
    
    # Convert scientific notation to float for proper plotting
    filtered_data['counts_live_bacteria_per_wet_g'] = pd.to_numeric(filtered_data['counts_live_bacteria_per_wet_g'], errors='coerce')
    
    # Save filtered data for future reference
    output_file = os.path.join('output', 'fecal_data.csv')
    filtered_data.to_csv(output_file, index=False)
    
    return filtered_data

def filter_organ_data(data, organ_type):
    """
    Filter data for organ samples (cecal or ileal) to create violin plots
    Args:
        data (pandas.DataFrame): Raw data containing all measurements
        organ_type (str): Type of organ to filter ('cecal' or 'ileal')
    Returns:
        pandas.DataFrame: Filtered data containing only specified organ measurements
    """
    # Select only specified organ samples
    organ_data = data[data['sample_type'] == organ_type]
    
    # Filter for day 21 (when organs were collected)
    organ_data = organ_data[organ_data['mouse_age_days'] == 21]
    
    # Keep only necessary columns
    filtered_data = organ_data[['treatment', 'counts_live_bacteria_per_wet_g']]
    
    # Convert scientific notation to float for proper plotting
    filtered_data['counts_live_bacteria_per_wet_g'] = pd.to_numeric(filtered_data['counts_live_bacteria_per_wet_g'], errors='coerce')
    
    # Save filtered data for future reference
    output_file = os.path.join('output', f'{organ_type}_data.csv')
    filtered_data.to_csv(output_file, index=False)
    
    return filtered_data

def create_line_plot(data):
    """
    Create line plot showing bacteria evolution over time for each mouse
    Args:
        data (pandas.DataFrame): Filtered fecal data
    """
    # Create new figure with specified size
    plt.figure(figsize=(12, 6))
    
    # Plot data for each treatment group and each mouse
    for treatment in ['ABX', 'placebo']:
        treatment_data = data[data['treatment'] == treatment]
        for mouse in treatment_data['mouse_ID'].unique():
            mouse_data = treatment_data[treatment_data['mouse_ID'] == mouse]
            # Plot line for each mouse
            plt.plot(mouse_data['experimental_day'], mouse_data['counts_live_bacteria_per_wet_g'], color=COLORS[treatment], alpha=0.5)
            # Add points for each measurement
            plt.scatter(mouse_data['experimental_day'], mouse_data['counts_live_bacteria_per_wet_g'], color=COLORS[treatment], alpha=0.5, s=30)

    # Customize plot appearance
    plt.title('Evolution of Bacteria Count in Fecal Samples', pad=20)
    plt.xlabel('Experimental Day')
    plt.ylabel('Live Bacteria Count (per wet g)')
    plt.yscale('log')  # Use log scale for better visualization of large range
    
    # Add legend
    plt.plot([], [], color=COLORS['ABX'], label='Antibiotics (ABX)')
    plt.plot([], [], color=COLORS['placebo'], label='Placebo')
    plt.legend()
    
    # Save plot to file
    plt.savefig(os.path.join('images', 'fecal_line_plot.png'))
    
    # Show plot
    plt.show()
    
    plt.close()

def create_violin_plot(data, organ_type):
    """
    Create violin plot showing bacteria distribution in organs
    Args:
        data (pandas.DataFrame): Filtered organ data
        organ_type (str): Type of organ ('cecal' or 'ileal')
    """
    # Create new figure with specified size
    plt.figure(figsize=(8, 6))
    
    # Separate data by treatment
    abx_data = data[data['treatment'] == 'ABX']['counts_live_bacteria_per_wet_g']
    placebo_data = data[data['treatment'] == 'placebo']['counts_live_bacteria_per_wet_g']
    
    # Create violin plot
    parts = plt.violinplot([abx_data, placebo_data], positions=[0, 1])
    
    # Add individual points for each measurement
    plt.scatter([0] * len(abx_data), abx_data, color=COLORS['ABX'], alpha=0.6, s=30)
    plt.scatter([1] * len(placebo_data), placebo_data, color=COLORS['placebo'], alpha=0.6, s=30)
    
    # Customize violin colors
    for pc in parts['bodies']:
        pc.set_facecolor(COLORS['ABX'])
        pc.set_alpha(0.3)
    parts['bodies'][1].set_facecolor(COLORS['placebo'])
    
    # Customize other elements
    for partname in ['cbars', 'cmins', 'cmaxes']:
        parts[partname].set_edgecolor('black')
    
    # Customize plot appearance
    plt.title(f'Bacteria Distribution in {organ_type.capitalize()} Samples', pad=20)
    plt.xlabel('Treatment Group')
    plt.ylabel('Live Bacteria Count (per wet g)')
    plt.yscale('log')  # Use log scale for better visualization
    
    # Set x-axis labels
    plt.xticks([0, 1], ['ABX', 'Placebo'])
    
    # Save plot to file
    plt.savefig(os.path.join('images', f'{organ_type}_violin_plot.png'))
    
    # Show plot
    plt.show()
    
    plt.close()

# Load and process data
input_filename = 'data_real.csv'
data = load_csv(input_filename)

# Process and create plots for fecal data
fecal_data = filter_fecal_data(data)
create_line_plot(fecal_data)

# Process and create plots for cecal data
cecal_data = filter_organ_data(data, 'cecal')
create_violin_plot(cecal_data, 'cecal')

# Process and create plots for ileal data
ileal_data = filter_organ_data(data, 'ileal')
create_violin_plot(ileal_data, 'ileal')
